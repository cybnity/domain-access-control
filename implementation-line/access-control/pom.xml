<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>access-control-applications-impl</artifactId>
		<groupId>org.cybnity</groupId>
		<version>${revision}</version>
		<relativePath>..</relativePath>
	</parent>
	<groupId>org.cybnity.application</groupId>
	<artifactId>access-control</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>
	<name>Access control application (bounded context)</name>

	<modules>
		<module>ac-domain-model</module>
		<module>ac-translator</module>
		<module>ac-adapter</module>
		<module>ac-service</module>
		<module>ac-system</module>
		<module>ac-ui</module>
	</modules>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.cybnity.application.access-control.translator</groupId>
				<artifactId>ui-api</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.cybnity.application.access-control.ui</groupId>
				<artifactId>api</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.cybnity.application.access-control.system</groupId>
				<artifactId>domain-gateway-server</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.cybnity.application.access-control</groupId>
				<artifactId>service-impl</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.cybnity.application.access-control</groupId>
				<artifactId>service-api</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.cybnity.application.access-control</groupId>
				<artifactId>domain</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-web-client</artifactId>
				<version>${vertx.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-rx-java3</artifactId>
				<version>${vertx.version}</version>
				<scope>compile</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	

	<properties>
		<launcher.class>io.vertx.core.Launcher</launcher.class>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Base configuration of shader creating mixed classes packages into only one artifact -->
					<artifactId>maven-shade-plugin</artifactId>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>shade</goal>
							</goals>
							<configuration>
								<filters>
									<filter>
										<artifact>*:*</artifact>
										<excludes>
											<!-- Avoid detection of multiple same jar classes versions in path -->
											<exclude>module-info.class</exclude>
											<!--<exclude>META-INF/**</exclude>-->
										</excludes>
									</filter>
								</filters>
								<transformers>
									<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
										<manifestEntries>
											<Main-Class>${launcher.class}</Main-Class>
											<Main-Verticle>${main.verticle}</Main-Verticle>
										</manifestEntries>
									</transformer>
									<transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer" />
									<transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer" />
									<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								</transformers>
								<createDependencyReducePom>false</createDependencyReducePom>
								<outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- Base configuration of launcher of Vert.x application -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<configuration>
						<mainClass>${launcher.class}</mainClass>
						<arguments>
							<argument>run</argument>
							<argument>${main.verticle}</argument>
						</arguments>
					</configuration>
				</plugin>

				<plugin>
					<!-- @Requirement(reqType = RequirementCategory.Maintainability, reqId = "REQ_MAIN_1") -->
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<configuration>
						<images>
							<!-- Create an in-memory Dockerfile, copies over the assembled files and calls the Docker daemon via its remote API -->
							<image>
								<!-- Unique docker repository name including registry and tag parts -->
								<name>cybnity/${module.system.image.name}</name>
								<alias>${module.system.image.name}</alias>
								<build>
									<!-- The CYBNITY JRE container standard base image (Trusted Execution Environment) extended -->
									<from>${docker.java.tee.image.name}</from>
									<maintainer>CYBNITY Core Team</maintainer>
									<cleanup>try</cleanup>
									<noCache />
									<tags>
										<!-- Additional tags which an image is to be tagged after the build -->
										<tag>${revision}${docker.images.tag.suffix}</tag>
									</tags>
									<labels>
										<version>${project.version}</version>
										<artifactId>${project.artifactId}</artifactId>
									</labels>
									<env>
										<!-- Update the default TARTED_JAR_FILE environment variable about Java application jar file name, defined as main jar to start by the container -->
										<STARTED_JAR_FILE>${project.artifactId}-${project.version}-fat.jar</STARTED_JAR_FILE>
									</env>
									<assembly>
										<!-- Attach projectâ€™s artifact (its dependencies are embedded into the shaded jar) -->
										<descriptor>shaded-artifact-docker-assembly.xml</descriptor>
										<targetDir>/opt/cybnity</targetDir>
										<mode>dir</mode>
									</assembly>
									<healthCheck>
										<!-- Default configuration of image health check -->
										<!-- Check every 5 minutes -->
										<interval>5m</interval>
										<!-- Fail if no response after 3 seconds -->
										<timeout>3s</timeout>
										<!-- Allow 30 minutes for the container to start before being flagged as unhealthy -->
										<startPeriod>20s</startPeriod>
										<!-- Fail 3 times until the container is considered unhealthy -->
										<retries>3</retries>
										<!-- Find current started JVM process that is running based on the main class normally started (current operational status) -->
										<cmd>jps -l | grep '$STARTED_JAR_FILE' || exit 1</cmd>
									</healthCheck>
									<ports>
										<!-- Expose the Health Check http port allowing control of image operational status when is running -->
										<port>${docker.images.healtcheck.port}</port>
									</ports>
									<entryPoint>
										<!-- Set the jar file to start from the TEE base image's $JAVA_APP_DIR_PATH environment variable defined as safe applications directory -->
										<!-- Becarefull, variable can only be used in shell Form, but are not supported in command invoked via exec form (entrypoint) -->
										<shell>java -jar $JAVA_APP_DIR_PATH/$STARTED_JAR_FILE</shell>
									</entryPoint>
								</build>
							</image>
						</images>
						<outputDirectory>target/docker</outputDirectory>
						<sourceDirectory>src/main/docker</sourceDirectory>
					</configuration>
					<executions>
						<execution>
							<id>docker-build</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<execution>
							<!-- Upload images to the registry -->
							<id>docker-push</id>
							<phase>deploy</phase>
							<goals>
								<goal>push</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
